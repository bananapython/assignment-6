import sys

class Link(object):
    def __init__(self,data):
        self.data=data
        self.next=None

class CircularList(object):
  # Constructor
    def __init__ ( self ):
        self.first=None
        self.size = 0
        self.previous=None
        

  # Insert an element (value) in the list
    def insert ( self, data ):
        if self.first==None: #filling empty list
            newLink = Link(data)
            self.first=newLink
            newLink.next=self.first #closes circle
            self.previous=newLink
            
            self.size += 1
            return
        
        else: #filling non-empty list
            newLink=Link(data)
            newLink.next=self.first
            self.previous.next=newLink
            self.previous=newLink
            
            self.size+=1

  # Find the Link with the given data (value)
  # or return None if the data is not there
    def find ( self, data ):
        count = 0
        current=self.first
        if current==None:
            return None
    
        while count != self.size:
            if current.data == data:
                return current
            current = current.next
            count += 1

        return None
    
  # Delete a Link with a given data (value) and return the Link
  # or return None if the data is not there
    def delete (self, data):
        count = 0
        current = self.first
        previous = self.first
        
        while count != self.size and current.data != data:
            previous = current
            current = current.next
            count += 1

        if count == self.size:
            return None

        if self.size == 1 and current == self.first:
            self.first = None
        elif current == self.first:
            self.first = self.first.next
        else:
            previous.next = current.next

        self.size -= 1
        return current
    
  # Delete the nth Link starting from the Link start
  # Return the data of the deleted Link AND return the
  # next Link after the deleted Link in that order
    def delete_after ( self, start, n ):
        count = 0
        current = self.find(start)
        previous = self.find(start)

        while count != (n-1):
            previous = current
            current = current.next
            #print(current.data)
            count += 1
            
        deleted=self.delete(current.data)

        if current == self.first:
            self.first = self.first.next
        else:
            previous.next = current.next

        return current.data, current.next.data
    
  # Return a string representation of a Circular List
  # The format of the string will be the same as the __str__
  # format for normal Python lists
    def __str__( self ):
        data = []
        current = self.first
        count = 0
        while count != self.size:
            data.append(current.data)
            current = current.next
            count += 1

        return str(data)
    
    
def main():
  # read number of soldiers
    line = sys.stdin.readline()
    line = line.strip()
    num_soldiers = int (line)

  # read the starting number
    line = sys.stdin.readline()
    line = line.strip()
    start_count = int (line)

  # read the elimination number
    line = sys.stdin.readline()
    line = line.strip()
    elim_num = int (line)

  # your code
    circle=CircularList()
    name=1
    for i in range(num_soldiers):
        circle.insert(name)
        name+=1
    #print(circle)
        
    start=start_count    
    for i in range(num_soldiers):
        data,start=circle.delete_after(start,elim_num)
        print(data)
        #print("this is ", start)
        #delete from starting link. ending link becomes new starting link
        #print out eliminated soldier

if __name__ == "__main__":
    main()
